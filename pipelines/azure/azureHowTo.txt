You need to perform a few simple steps to have your jmeter distributed tests up and running on Azure:

1. Create a kubernetes cluster in azure with selected number of nodes e.g. 3
    Go to https://portal.azure.com/#home
    Create resource group
    Create a resource: Kubernetes Service
    Select name and resource group
    Select 3 nodes (location closest to your AUT)
    Keep clickin next
    When provisioning is done note:

    - cluster_name,
    - cluster_resource_group,
    - cluster_namespace

   We will need it further on.

2. Choose the right pipeline

 There are the following pipelines in pipelines/azure folder

    (0) azure-pipelines.0.standalone.build_agent.yaml

        An example of running jmeter tests from maven project. By default this runs test from build agent but can be
        configured to connect to any distributed cluster. We recommend to use one of the distributed pipelines (2) or (3).

    (1) azure-pipelines.1.distributed.global_credentials.yaml:

        A simple and short pipeline that runs tests using kubernetes cluster. This requires a token for each run.
        The plus is that you do not need to create a service connection. You need to edit the pipeline variables section/configuration.
        We recommend to use one of the distributed pipelines (2) or (3).

    (2) azure-pipelines.2.distributed.yaml

        This is an azure pipeline that runs tests from within kubernetes cluster. It requires a valid service connection of type
        kubernetes. All parameters are configured in pipeline itself.

    (3) azure-pipelines.3.distributed.variable_based.yaml

        This is the same as (2) except all configuration is done in devops portal as variables. It does not require to edit
        the yaml file and is most universal.

3. Configure pipeline in Azure DevOps

    If you chose (0),(1) or (2) edit yaml file with necessary details before this step.

    In https://dev.azure.com/ select your DevOps organization and project.
    Click + and create new pipeline. Select github. Select your repo.
    Select "Existing Azure Pipelines YAML file"
    Navigate to desired piepline yaml file. Select Continue and Run.

    If you chose (3) click Save instead of Run. The click Edit->Variables and add all required variables e.g.


4. Run

    Click Run if you did not.


#Useful kubernetes commands from Cloud Shell:


